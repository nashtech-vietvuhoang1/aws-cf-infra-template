#!/bin/sh

APPNAME=$0
TMP_FOLDER=.tmp
INFRA_FOLDER=infra
PIPELINE_FOLDER=pipeline

usage() {
    echo "$1"
    echo ${APPNAME}
    echo "Environment variables:"
    echo " STACKNAME                 [REQUIRED]: your cloudformation stack name"
    echo " S3_BUCKET                 [REQUIRED]: S3 bucket to store the tempolary template file"    
    echo " TARGET_ENV                [REQUIRED]: environment where the stack will be deployed. Valid values: dev|test|uat|prod"    
    echo " GIT_BRANCH                [OPTIONAL]: GitHub branch name"    
    echo " GIT_CONNECTION_ARN        [REQUIRED]: GitHub Connection Arn"    
    echo " BASTION_HOST_KEY_NAME     [REQUIRED]: AWS KeyPair name"
    echo " REGION                    [OPTIONAL]: AWS Region where the stack will be deployed"

    
}

MODE=${INFRA_FOLDER}

FULL_TMP_FOLDER=${TMP_FOLDER}/${MODE}

if [ ! -d "${FULL_TMP_FOLDER}" ]; then
    mkdir -p ${FULL_TMP_FOLDER}
fi

if [ -z "${STACKNAME}" ]; then
  usage "Please provide the stackname"
  exit 1
fi

if [ -z "${S3_BUCKET}" ]; then
  usage "Please provide the deployment-S3-bucket-name"
  exit 1
fi

if [ -z "${TARGET_ENV}" ]; then
  usage "Please provide Target Environment"
  exit 1
fi

PARAMETERS="--parameters  ParameterKey=Environment,ParameterValue=${TARGET_ENV} "

AWS_REGION=""

if [ ! -z "${REGION}" ]; then
  AWS_REGION="--region ${REGION}"
fi

CONNECTION_ARN=""

if [ ! -z "${GIT_CONNECTION_ARN}" ]; then
  CONNECTION_ARN="ParameterKey=GitHubConnectionArn,ParameterValue=${GIT_CONNECTION_ARN}"
  PARAMETERS="${PARAMETERS} ${CONNECTION_ARN}"
else
  usage "Please provide the deployment-S3-bucket-name"
  exit 1
fi

BASTION_HOST_KEY_NAME_PARAM=""

if [ -z "${BASTION_HOST_KEY_NAME}" ]; then
  usage "Please provide AWS BastionHost KeyName"
  exit 1
else 
  BASTION_HOST_KEY_NAME_PARAM="ParameterKey=BastionHostKeyName,ParameterValue=${BASTION_HOST_KEY_NAME}"
  PARAMETERS="${PARAMETERS} ${BASTION_HOST_KEY_NAME_PARAM}"
fi

GIT_BRANCH_PARAM=""

if [ -z "${GIT_BRANCH}" ]; then
  GIT_BRANCH_PARAM="ParameterKey=GitHubBranchName,ParameterValue=${TARGET_ENV}"
else 
  GIT_BRANCH_PARAM="ParameterKey=GitHubBranchName,ParameterValue=${GIT_BRANCH}"
fi

PARAMETERS="${PARAMETERS} ${GIT_BRANCH_PARAM}"

aws cloudformation package --template-file ${MODE}/main-stack.yaml --s3-bucket ${S3_BUCKET} --region ${REGION} --output-template-file ./${FULL_TMP_FOLDER}/main-stack.yaml

RET=$?

if [ "$RET" = "0" ]; then
  if aws cloudformation describe-stacks ${AWS_REGION} --stack-name ${STACKNAME}  2>/dev/null; then
    echo "Update stack ${STACKNAME}"
    aws cloudformation  update-stack  \
  --template-body file://${FULL_TMP_FOLDER}/main-stack.yaml \
  --stack-name ${STACKNAME} \
  --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM  CAPABILITY_AUTO_EXPAND  \
  ${PARAMETERS} ${AWS_REGION}
    exit $?
  else
    echo "Create stack ${STACKNAME}"
    aws cloudformation  create-stack  \
  --template-body file://${FULL_TMP_FOLDER}/main-stack.yaml \
  --stack-name ${STACKNAME} \
  --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM  CAPABILITY_AUTO_EXPAND  \
  ${PARAMETERS} ${AWS_REGION}
    exit $?
  fi
else
  echo "Failed"
  exit ${RET}
fi
